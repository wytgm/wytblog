"use strict";hexo.extend.helper.register("inject_head_js",(function(){const{darkmode:e,aside:t}=this.theme,n=e.start?e.start:6,o=e.end?e.end:18,{theme_color:i}=hexo.theme.config,a=i&&i.enable&&i.meta_theme_color_light||"#ffffff",r=i&&i.enable&&i.meta_theme_color_dark||"#0d0d0d";let c="";if(e.enable){c=`\n      win.activateDarkMode = function () {\n        document.documentElement.setAttribute('data-theme', 'dark')\n        if (document.querySelector('meta[name="theme-color"]') !== null) {\n          document.querySelector('meta[name="theme-color"]').setAttribute('content', '${r}')\n        }\n      }\n      win.activateLightMode = function () {\n        document.documentElement.setAttribute('data-theme', 'light')\n        if (document.querySelector('meta[name="theme-color"]') !== null) {\n          document.querySelector('meta[name="theme-color"]').setAttribute('content', '${a}')\n        }\n      }\n      const t = saveToLocal.get('theme')\n    `;const t=e.autoChangeMode;c+=1===t?`\n          const isDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches\n          const isLightMode = window.matchMedia('(prefers-color-scheme: light)').matches\n          const isNotSpecified = window.matchMedia('(prefers-color-scheme: no-preference)').matches\n          const hasNoSupport = !isDarkMode && !isLightMode && !isNotSpecified\n\n          if (t === undefined) {\n            if (isLightMode) activateLightMode()\n            else if (isDarkMode) activateDarkMode()\n            else if (isNotSpecified || hasNoSupport) {\n              const now = new Date()\n              const hour = now.getHours()\n              const isNight = hour <= ${n} || hour >= ${o}\n              isNight ? activateDarkMode() : activateLightMode()\n            }\n            window.matchMedia('(prefers-color-scheme: dark)').addListener(function (e) {\n              if (saveToLocal.get('theme') === undefined) {\n                e.matches ? activateDarkMode() : activateLightMode()\n              }\n            })\n          } else if (t === 'light') activateLightMode()\n          else activateDarkMode()\n        `:2===t?`\n          const now = new Date()\n          const hour = now.getHours()\n          const isNight = hour <= ${n} || hour >= ${o}\n          if (t === undefined) isNight ? activateDarkMode() : activateLightMode()\n          else if (t === 'light') activateLightMode()\n          else activateDarkMode()\n        `:"\n          if (t === 'dark') activateDarkMode()\n          else if (t === 'light') activateLightMode()\n        "}let s="";t.enable&&t.button&&(s="\n      const asideStatus = saveToLocal.get('aside-status')\n      if (asideStatus !== undefined) {\n        if (asideStatus === 'hide') {\n          document.documentElement.classList.add('hide-aside')\n        } else {\n          document.documentElement.classList.remove('hide-aside')\n        }\n      }\n    ");return`<script>(win=>{${"\n    win.saveToLocal = {\n      set: function setWithExpiry(key, value, ttl) {\n        if (ttl === 0) return\n        const now = new Date()\n        const expiryDay = ttl * 86400000\n        const item = {\n          value: value,\n          expiry: now.getTime() + expiryDay,\n        }\n        localStorage.setItem(key, JSON.stringify(item))\n      },\n\n      get: function getWithExpiry(key) {\n        const itemStr = localStorage.getItem(key)\n\n        if (!itemStr) {\n          return undefined\n        }\n        const item = JSON.parse(itemStr)\n        const now = new Date()\n\n        if (now.getTime() > item.expiry) {\n          localStorage.removeItem(key)\n          return undefined\n        }\n        return item.value\n      }\n    }\n  \n    win.getScript = url => new Promise((resolve, reject) => {\n      const script = document.createElement('script')\n      script.src = url\n      script.async = true\n      script.onerror = reject\n      script.onload = script.onreadystatechange = function() {\n        const loadState = this.readyState\n        if (loadState && loadState !== 'loaded' && loadState !== 'complete') return\n        script.onload = script.onreadystatechange = null\n        resolve()\n      }\n      document.head.appendChild(script)\n    })\n  \n    win.getCSS = (url,id = false) => new Promise((resolve, reject) => {\n      const link = document.createElement('link')\n      link.rel = 'stylesheet'\n      link.href = url\n      if (id) link.id = id\n      link.onerror = reject\n      link.onload = link.onreadystatechange = function() {\n        const loadState = this.readyState\n        if (loadState && loadState !== 'loaded' && loadState !== 'complete') return\n        link.onload = link.onreadystatechange = null\n        resolve()\n      }\n      document.head.appendChild(link)\n    })\n  "+c+s+"\n    const detectApple = () => {\n      if(/iPad|iPhone|iPod|Macintosh/.test(navigator.userAgent)){\n        document.documentElement.classList.add('apple')\n      }\n    }\n    detectApple()\n    "}})(window)<\/script>`}));